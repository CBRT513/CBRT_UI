#!/bin/bash
# ========= CBRT_UI DEV AUTO-SETUP (domains + caddy + vite + firebase env) =========
set -euo pipefail

APP_DIR="${APP_DIR:-$HOME/CBRT_UI}"
APP_PORT="${APP_PORT:-5176}"
DOMAINS=("cbrt-ui.test" "sso.test" "vader-lab.test")
DEVJSON="$HOME/.devapps.json"
CADDYFILE="/opt/homebrew/etc/Caddyfile"

echo ">> Ensuring helpers exist: devhosts-json & vite-allow ..."
mkdir -p "$HOME/bin"

# -- devhosts-json: renders /etc/hosts + Caddyfile from ~/.devapps.json
if ! command -v devhosts-json >/dev/null 2>&1; then
  cat > "$HOME/bin/devhosts-json" <<'SH'
#!/usr/bin/env bash
set -euo pipefail
CFG="${1:-$HOME/.devapps.json}"
[ -f "$CFG" ] || { echo "No $CFG found"; exit 1; }
CF="/opt/homebrew/etc/Caddyfile"; BK="/opt/homebrew/etc/Caddyfile.bak"

echo "# generated by devhosts-json on $(date)" | sudo tee "$CF" >/dev/null

sudo tee -a "$CF" >/dev/null <<'CADDY'
{
  admin off
  auto_https disable_redirects
  servers { protocols h1 h2 }
}
(import common_headers) {
  header_up X-Forwarded-Proto https
  header_up X-Forwarded-Host {host}
  header_up Host localhost
}
CADDY

python3 - "$CFG" "$CF" <<'PY'
import sys, json; cfg=json.load(open(sys.argv[1])); cf=open(sys.argv[2],"a")
def block(host, port):
    return f"""
https://{host} {{
  tls internal
  reverse_proxy localhost:{port} {{
    import common_headers
  }}
}}
"""
for host, port in cfg.items():
    cf.write(block(host, port))
cf.flush()
PY

[ -f "$BK" ] || sudo cp -n "$CF" "$BK" 2>/dev/null || true

TMP="$(mktemp)"; echo "## devhosts-json $(date)" > "$TMP"; echo "127.0.0.1 localhost" >> "$TMP"
python3 - "$CFG" >> "$TMP" <<'PY'
import sys, json
for host in json.load(open(sys.argv[1])).keys():
    print(f"127.0.0.1 {host}")
PY
sudo sh -c "grep -vE 'devhosts-json|\\.test' /etc/hosts > /etc/hosts.clean || true"
sudo sh -c "cat /etc/hosts.clean '$TMP' > /etc/hosts && rm -f /etc/hosts.clean '$TMP'"

brew services restart caddy >/dev/null || true
echo "devhosts-json: updated /etc/hosts and $CF; caddy restarted."
SH
  chmod +x "$HOME/bin/devhosts-json"
fi

# -- vite-allow: patches vite config for host/allowedHosts/port
if ! command -v vite-allow >/dev/null 2>&1; then
  cat > "$HOME/bin/vite-allow" <<'SH'
#!/usr/bin/env bash
set -euo pipefail
PROJ="${1:?usage: vite-allow <project_dir> <port> [domain1 domain2 ...] }"
PORT="${2:?usage: vite-allow <project_dir> <port> [domain1 domain2 ...] }"; shift 2
ALLOWED="$*"
cd "$PROJ" || { echo "No project at $PROJ"; exit 1; }

CFG=""
for f in vite.config.ts vite.config.js; do [ -f "$f" ] && CFG="$f" && break; done

gen_cfg() {
cat <<JS
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
export default defineConfig({
  plugins: [react()],
  server: {
    host: true,
    allowedHosts: [${ALLOWED:+$(printf "'%s'," $ALLOWED | sed 's/,$//')}],
    port: ${PORT},
    strictPort: true,
  },
})
JS
}

if [ -z "$CFG" ]; then
  echo "Creating vite.config.js ..."
  gen_cfg > vite.config.js
else
  cp "$CFG" "$CFG.bak.$(date +%Y%m%d_%H%M%S)"
  echo "Overwriting $CFG with dev-safe config ..."
  gen_cfg > "$CFG"
fi
echo "vite-allow: done for $(pwd) on port $PORT"
SH
  chmod +x "$HOME/bin/vite-allow"
fi

# PATH ensure
case ":$PATH:" in *":$HOME/bin:"*) :;; *) echo 'export PATH="$HOME/bin:$PATH"' >> "$HOME/.zshrc"; esac

echo ">> Updating domain→port map at $DEVJSON ..."
# Seed or update JSON
if [ ! -f "$DEVJSON" ]; then
  cat > "$DEVJSON" <<JSON
{
  "ums.test": 8091,
  "vader-lab.test": 5173,
  "sso.test": 5174,
  "cbrt-ui.test": ${APP_PORT},
  "machine-maintenance.test": 3001,
  "barge2rail.test": 5000,
  "codeforge.test": 8080,
  "mesh.test": 4080
}
JSON
else
  # ensure keys exist; set CBRT to desired port
  jq \
    --argjson p ${APP_PORT} \
    '.["cbrt-ui.test"]=$p | if has("vader-lab.test") then . else .["vader-lab.test"]=5173 end | if has("sso.test") then . else .["sso.test"]=5174 end | if has("ums.test") then . else .["ums.test"]=8091 end' \
    "$DEVJSON" > "$DEVJSON.tmp" && mv "$DEVJSON.tmp" "$DEVJSON"
fi

echo ">> Rendering hosts + Caddyfile ..."
devhosts-json

echo ">> Patching Vite config for CBRT_UI ..."
vite-allow "$APP_DIR" "$APP_PORT" "${DOMAINS[@]}"

echo ">> Creating .env.local placeholders if missing ..."
ENVFILE="$APP_DIR/.env.local"
if [ ! -f "$ENVFILE" ]; then
  cat > "$ENVFILE" <<'ENV'
# --- Vite Firebase dev env (fill real values; restart Vite after editing) ---
VITE_FIREBASE_API_KEY=
VITE_FIREBASE_AUTH_DOMAIN=cbrt-ui.test
VITE_FIREBASE_PROJECT_ID=
VITE_FIREBASE_APP_ID=
VITE_FIREBASE_MESSAGING_SENDER_ID=
VITE_FIREBASE_STORAGE_BUCKET=
ENV
  echo "Wrote $ENVFILE (placeholders)."
else
  echo "$ENVFILE exists — not overwriting."
fi

echo ">> Quick checks ..."
sudo lsof -nP -iTCP:443 -sTCP:LISTEN | awk 'NR==1 || /caddy/'
for h in cbrt-ui.test sso.test vader-lab.test; do
  printf "%-22s " "$h"
  openssl s_client -connect "$h:443" -servername "$h" </dev/null 2>/dev/null | openssl x509 -noout -subject >/dev/null \
    && echo "TLS OK" || echo "TLS WARN"
done

echo
echo "✅ Done."
echo "Next steps:"
echo "  1) Put real Firebase keys into:  $ENVFILE"
echo "  2) Add dev domains in Firebase → Auth → Authorized domains: cbrt-ui.test, sso.test"
echo "  3) Start CBRT_UI:  cd \"$APP_DIR\" && PORT=${APP_PORT} npm run dev -- --host"
echo "  4) Open https://cbrt-ui.test  (Caddy will proxy with local TLS)"
# ==============================================================================