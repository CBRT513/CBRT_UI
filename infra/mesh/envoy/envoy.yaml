admin:
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 15000

static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 10000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          access_log:
          - name: envoy.access_loggers.stdout
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              log_format:
                text_format: |
                  [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%"
                  %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT%
                  %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%"
                  "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%"
                  "%UPSTREAM_HOST%" %DOWNSTREAM_TLS_VERSION% %DOWNSTREAM_TLS_CIPHER%
                  %DOWNSTREAM_PEER_CERT_V_START% %DOWNSTREAM_PEER_CERT_V_END%
          http_filters:
          - name: envoy.filters.http.local_ratelimit
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
              stat_prefix: local_rate_limiter
              token_bucket:
                max_tokens: 1000
                tokens_per_fill: 100
                fill_interval: 1s
              filter_enabled:
                runtime_key: local_rate_limit_enabled
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              filter_enforced:
                runtime_key: local_rate_limit_enforced
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              response_headers_to_add:
              - append: false
                header:
                  key: x-local-rate-limit
                  value: 'true'
          - name: envoy.filters.http.wasm
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
              config:
                name: "cbrt_security_filter"
                vm_config:
                  vm_id: "cbrt_security_filter"
                  runtime: "envoy.wasm.runtime.v8"
                  code:
                    local:
                      inline_string: |
                        class CBRTSecurityFilter {
                          constructor(rootContext) {
                            this.rootContext = rootContext;
                          }
                          
                          onRequestHeaders() {
                            const spiffeId = this.getRequestHeader("x-spiffe-id");
                            const userRole = this.getRequestHeader("x-user-role");
                            const path = this.getRequestHeader(":path");
                            
                            // Basic SPIFFE ID validation
                            if (!spiffeId || !spiffeId.startsWith("spiffe://cbrt.company.com/")) {
                              this.sendLocalResponse(403, "Forbidden: Invalid SPIFFE ID", "", []);
                              return 0;
                            }
                            
                            // Role-based path restrictions
                            if (path.startsWith("/admin/") && userRole !== "admin") {
                              this.sendLocalResponse(403, "Forbidden: Admin access required", "", []);
                              return 0;
                            }
                            
                            // Add security headers
                            this.addRequestHeader("x-security-validated", "true");
                            this.addRequestHeader("x-validation-time", new Date().toISOString());
                            
                            return 1; // Continue
                          }
                          
                          onResponseHeaders() {
                            // Add security response headers
                            this.addResponseHeader("x-content-type-options", "nosniff");
                            this.addResponseHeader("x-frame-options", "DENY");
                            this.addResponseHeader("x-xss-protection", "1; mode=block");
                            this.addResponseHeader("strict-transport-security", "max-age=31536000; includeSubDomains");
                            return 1;
                          }
                        }
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match:
                  prefix: "/health"
                route:
                  cluster: local_service
                  timeout: 5s
              - match:
                  prefix: "/ready"
                route:
                  cluster: local_service
                  timeout: 5s
              - match:
                  prefix: "/metrics"
                route:
                  cluster: prometheus_metrics
                  timeout: 10s
              - match:
                  prefix: "/api/"
                route:
                  cluster: api_service
                  timeout: 30s
                  retry_policy:
                    retry_on: 5xx,gateway-error,connect-failure,refused-stream
                    num_retries: 3
                    per_try_timeout: 10s
                    retry_back_off:
                      base_interval: 0.1s
                      max_interval: 10s
              - match:
                  prefix: "/"
                route:
                  cluster: local_service
                  timeout: 30s
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_certificates:
            - certificate_chain:
                filename: "/etc/certs/tls.crt"
              private_key:
                filename: "/etc/certs/tls.key"
            validation_context:
              trusted_ca:
                filename: "/etc/certs/ca.crt"
              verify_certificate_spki:
              - "sha256/REPLACE_WITH_ACTUAL_SPKI_PINS"
              verify_certificate_hash:
              - "sha256/REPLACE_WITH_ACTUAL_CERT_HASHES"
            tls_params:
              tls_minimum_protocol_version: TLSv1_2
              tls_maximum_protocol_version: TLSv1_3
              cipher_suites:
              - "ECDHE-ECDSA-AES256-GCM-SHA384"
              - "ECDHE-RSA-AES256-GCM-SHA384"
              - "ECDHE-ECDSA-CHACHA20-POLY1305"
              - "ECDHE-RSA-CHACHA20-POLY1305"
              - "ECDHE-ECDSA-AES128-GCM-SHA256"
              - "ECDHE-RSA-AES128-GCM-SHA256"
          require_client_certificate: true

  clusters:
  - name: local_service
    connect_timeout: 0.25s
    type: STATIC
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: local_service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 8080
    health_checks:
    - timeout: 5s
      interval: 10s
      unhealthy_threshold: 3
      healthy_threshold: 2
      http_health_check:
        path: "/health"
        expected_statuses:
        - start: 200
          end: 299
    circuit_breakers:
      thresholds:
      - priority: DEFAULT
        max_connections: 100
        max_pending_requests: 50
        max_requests: 200
        max_retries: 3
        retry_budget:
          budget_percent:
            value: 20
          min_retry_concurrency: 3
    outlier_detection:
      consecutive_5xx: 3
      consecutive_gateway_failure: 3
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 50
      min_health_percent: 50
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        common_tls_context:
          tls_certificates:
          - certificate_chain:
              filename: "/etc/certs/client.crt"
            private_key:
              filename: "/etc/certs/client.key"
          validation_context:
            trusted_ca:
              filename: "/etc/certs/ca.crt"
            verify_certificate_spki:
            - "sha256/REPLACE_WITH_ACTUAL_SPKI_PINS"
          tls_params:
            tls_minimum_protocol_version: TLSv1_2
            tls_maximum_protocol_version: TLSv1_3

  - name: api_service
    connect_timeout: 0.25s
    type: STRICT_DNS
    lb_policy: LEAST_REQUEST
    load_assignment:
      cluster_name: api_service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: cbrt-api-service
                port_value: 8080
    health_checks:
    - timeout: 3s
      interval: 5s
      unhealthy_threshold: 2
      healthy_threshold: 2
      http_health_check:
        path: "/health"
        expected_statuses:
        - start: 200
          end: 299
    circuit_breakers:
      thresholds:
      - priority: DEFAULT
        max_connections: 200
        max_pending_requests: 100
        max_requests: 400
        max_retries: 2
    outlier_detection:
      consecutive_5xx: 2
      consecutive_gateway_failure: 2
      interval: 5s
      base_ejection_time: 15s
      max_ejection_percent: 30
      min_health_percent: 70
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        common_tls_context:
          tls_certificates:
          - certificate_chain:
              filename: "/etc/certs/client.crt"
            private_key:
              filename: "/etc/certs/client.key"
          validation_context:
            trusted_ca:
              filename: "/etc/certs/ca.crt"

  - name: prometheus_metrics
    connect_timeout: 0.25s
    type: STATIC
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: prometheus_metrics
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 9090

# Bootstrap configuration for WASM runtime
bootstrap:
  stats_config:
    stats_tags:
    - tag_name: "cluster_name"
      regex: "^cluster\\.((.+?)\\.).*"
    - tag_name: "virtual_host_name"
      regex: "^vhost\\.((.+?)\\.).*"
    - tag_name: "listener_address"
      regex: "^listener\\.((.+?)\\.).*"
  node:
    cluster: "${SERVICE_NAME:-cbrt-service}"
    id: "${HOSTNAME:-unknown}"
    metadata:
      spiffe_id: "${SPIFFE_ID:-spiffe://cbrt.company.com/unknown}"
      service_name: "${SERVICE_NAME:-cbrt-service}"
      version: "${SERVICE_VERSION:-1.0.0}"
  dynamic_resources:
    cds_config:
      api_config_source:
        api_type: GRPC
        transport_api_version: V3
        grpc_services:
        - envoy_grpc:
            cluster_name: xds-cluster
    lds_config:
      api_config_source:
        api_type: GRPC
        transport_api_version: V3
        grpc_services:
        - envoy_grpc:
            cluster_name: xds-cluster

# Metrics and tracing configuration
stats_sinks:
- name: envoy.stat_sinks.metrics_service
  typed_config:
    "@type": type.googleapis.com/envoy.config.core.v3.GrpcService
    envoy_grpc:
      cluster_name: otel-collector
- name: envoy.stat_sinks.statsd
  typed_config:
    "@type": type.googleapis.com/envoy.extensions.stat_sinks.statsd.v3.Statsd
    tcp_cluster_name: statsd-cluster

tracing:
  http:
    name: envoy.tracers.opentelemetry
    typed_config:
      "@type": type.googleapis.com/envoy.config.trace.v3.OpenTelemetryConfig
      grpc_service:
        envoy_grpc:
          cluster_name: otel-collector
        timeout: 0.25s
      service_name: "${SERVICE_NAME:-cbrt-service}"