rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user has a specific permission
    function hasPerm(uid, perm) {
      return exists(/databases/$(database)/documents/staff/$(uid)) &&
             get(/databases/$(database)/documents/staff/$(uid)).data.perms[perm] == true;
    }
    
    // Helper function to check if user is a verifier
    function isVerifier(uid) {
      return exists(/databases/$(database)/documents/staff/$(uid)) &&
             (get(/databases/$(database)/documents/staff/$(uid)).data.isVerifier == true ||
              get(/databases/$(database)/documents/staff/$(uid)).data.perms.canVerify == true);
    }
    
    // Releases collection
    match /releases/{releaseId} {
      // Allow read for authenticated users
      allow read: if request.auth != null;
      
      // Allow create for authenticated users
      allow create: if request.auth != null;
      
      // Complex update rules for state transitions
      allow update: if request.auth != null && (
        // Stage: Entered -> Staged by user with canStage permission
        (resource.data.status == "Entered" &&
         request.resource.data.status == "Staged" &&
         hasPerm(request.auth.uid, "canStage")) ||
        
        // Verify: Staged -> Verified by non-stager with canVerify permission
        (resource.data.status == "Staged" &&
         request.resource.data.status == "Verified" &&
         isVerifier(request.auth.uid) &&
         resource.data.stagedBy != request.auth.uid) ||
        
        // Reject: Staged -> Entered by verifier
        (resource.data.status == "Staged" &&
         request.resource.data.status == "Entered" &&
         isVerifier(request.auth.uid)) ||
        
        // Load: Verified -> Loaded by user with canLoad permission and truck number
        (resource.data.status == "Verified" &&
         request.resource.data.status == "Loaded" &&
         hasPerm(request.auth.uid, "canLoad") &&
         request.resource.data.truckNumber is string && 
         request.resource.data.truckNumber.size() > 0) ||
        
        // Load: Staged -> Loaded (alternative path) by user with canLoad permission  
        (resource.data.status == "Staged" &&
         request.resource.data.status == "Loaded" &&
         hasPerm(request.auth.uid, "canLoad") &&
         request.resource.data.truckNumber is string && 
         request.resource.data.truckNumber.size() > 0) ||
        
        // Allow general updates that don't change status
        (resource.data.status == request.resource.data.status)
      );
      
      // No delete allowed
      allow delete: if false;
    }
    
    // Release lines collection
    match /releaseLines/{lineId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if false;
    }
    
    // Inventory lots collection
    match /inventoryLots/{lotId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        // Ensure quantities don't go negative
        request.resource.data.onHandQty >= 0 &&
        request.resource.data.committedQty >= 0
      );
      allow delete: if false;
    }
    
    // Audit logs collection (append-only)
    match /auditLogs/{logId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if false;
      allow delete: if false;
    }
    
    // UMS events collection (append-only)
    match /umsEvents/{eventId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if false;
      allow delete: if false;
    }
    
    // Staff collection
    match /staff/{staffId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == staffId;
      allow delete: if false;
    }
    
    // Default rule for other collections
    match /{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
  }
}