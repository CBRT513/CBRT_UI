// File: /Users/cerion/CBRT_UI/src/routes/NewRelease.jsx
// Barcode-Based Release Entry (No Products Collection)
import React, { useState, useMemo, useEffect } from 'react';
import { useFirestoreCollection } from '../hooks/useFirestore';
import { addDoc, collection } from 'firebase/firestore';
import { db } from '../firebase/config';
import { PickTicketService } from '../services/pickTicketService';
import { SMSService } from '../services/smsService';
import inventoryAvailabilityService from "../services/inventoryAvailabilityService";

/**
 * Simple logger helper. Replace or extend sendRemoteLog to ship logs externally.
 */
const timestamp = () => new Date().toISOString();
const sendRemoteLog = async (level, message, extra = {}) => {
  // Placeholder: hook into an external logging service here if desired.
  // Example: fetch('/api/log', { method: 'POST', body: JSON.stringify({ level, message, extra, ts: timestamp() }) })
  // For now, it's a no-op.
  return;
};

const log = {
  debug: (msg, extra) => {
    console.debug(`[DEBUG ${timestamp()}] ${msg}`, extra || '');
    sendRemoteLog('debug', msg, extra);
  },
  info: (msg, extra) => {
    console.info(`[INFO  ${timestamp()}] ${msg}`, extra || '');
    sendRemoteLog('info', msg, extra);
  },
  warn: (msg, extra) => {
    console.warn(`[WARN  ${timestamp()}] ${msg}`, extra || '');
    sendRemoteLog('warn', msg, extra);
  },
  error: (msg, extra) => {
    console.error(`[ERROR ${timestamp()}] ${msg}`, extra || '');
    sendRemoteLog('error', msg, extra);
  },
};

export default function NewRelease() {
  // Attach global error handler for this component lifespan
  useEffect(() => {
    const handleGlobalError = (message, source, lineno, colno, error) => {
      log.error('Global uncaught error', {
        message,
        source,
        lineno,
        colno,
        stack: error?.stack || null,
      });
    };

    window.addEventListener('error', handleGlobalError);
    window.addEventListener('unhandledrejection', (ev) => {
      log.error('Unhandled promise rejection', { reason: ev.reason });
    });

  // Test availability function
  const testAvailability = async () => {
    console.log("ðŸ§ª Testing availability calculation...");
    try {
      const itemId = "SSF3P9XNHZz0olGfyvi0";
      const sizeId = "bctJ3wnvwdr3IWxU4W54";
      const lotId = "4T7D6FlDdHdtzsH8DBxW";
      const availability = await inventoryAvailabilityService.getAvailableQuantity(itemId, sizeId, lotId);
      alert(`Available: ${availability.available} | On-hand: ${availability.onHand} | Committed: ${availability.committed}`);
    } catch (error) {
      alert("Test failed: " + error.message);
    }
  };

    return () => {
      window.removeEventListener('error', handleGlobalError);
    };
  }, []);

  const { data: suppliers } = useFirestoreCollection('suppliers');
  const { data: customers } = useFirestoreCollection('customers');
  const { data: items } = useFirestoreCollection('items');
  const { data: sizes } = useFirestoreCollection('sizes');
  const { data: lots } = useFirestoreCollection('lots');
  const { data: barcodes } = useFirestoreCollection('barcodes');
  const { data: staff } = useFirestoreCollection('staff');

  const [selectedSupplier, setSelectedSupplier] = useState('');
  const [selectedCustomer, setSelectedCustomer] = useState('');

  // Test availability function
  const testAvailability = async () => {
    console.log("Testing availability...");
    try {
      const availability = await inventoryAvailabilityService.getAvailableQuantity("SSF3P9XNHZz0olGfyvi0", "bctJ3wnvwdr3IWxU4W54", "4T7D6FlDdHdtzsH8DBxW");
      alert("Available: " + availability.available + " | On-hand: " + availability.onHand);
    } catch (error) {
      alert("Test failed: " + error.message);
    }
  };
  const [releaseNumber, setReleaseNumber] = useState('');
  const [pickupDate, setPickupDate] = useState('');
  const [lineItems, setLineItems] = useState([
    {
      ItemId: '',
      SizeId: '',
      LotId: '',
      Quantity: 1,
    },
  ]);

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // BARCODE-BASED: Get available items using barcodes directly
  const getAvailableItems = useMemo(() => {
    log.debug('Computing available items', {
      selectedSupplier,
      selectedCustomer,
      hasBarcodes: !!barcodes,
      hasItems: !!items,
    });

    if (
      !selectedSupplier ||
      !selectedCustomer ||
      !barcodes ||
      !items ||
      !suppliers ||
      !customers
    ) {
      log.debug('Missing required data to compute available items');
      return [];
    }

    const supplier = suppliers.find((s) => s.id === selectedSupplier);
    const customer = customers.find((c) => c.id === selectedCustomer);

    if (!supplier || !customer) {
      log.warn('Supplier or customer not found while computing available items', {
        selectedSupplier,
        selectedCustomer,
      });
      return [];
    }

    const supplierBarcodes = barcodes.filter(
      (barcode) =>
        barcode.SupplierName === supplier.SupplierName &&
        barcode.CustomerName === customer.CustomerName &&
        barcode.Status === 'Available'
    );

    const itemIds = [...new Set(supplierBarcodes.map((b) => b.ItemId))];
    const result = items.filter((item) => itemIds.includes(item.id));

    log.debug('Available items resolved', { count: result.length, itemIds });
    return result;
  }, [
    selectedSupplier,
    selectedCustomer,
    barcodes,
    items,
    suppliers,
    customers,
  ]);

  const getAvailableSizes = (itemId) => {
    log.debug('Computing available sizes', {
      itemId,
      selectedSupplier,
      selectedCustomer,
    });

    if (
      !itemId ||
      !selectedSupplier ||
      !selectedCustomer ||
      !barcodes ||
      !sizes ||
      !suppliers ||
      !customers
    ) {
      log.debug('Missing data for available sizes');
      return [];
    }

    const supplier = suppliers.find((s) => s.id === selectedSupplier);
    const customer = customers.find((c) => c.id === selectedCustomer);

    if (!supplier || !customer) {
      log.warn('Supplier or customer missing for sizes lookup');
      return [];
    }

    const itemBarcodes = barcodes.filter(
      (barcode) =>
        barcode.SupplierName === supplier.SupplierName &&
        barcode.CustomerName === customer.CustomerName &&
        barcode.ItemId === itemId &&
        barcode.Status === 'Available'
    );

    const sizeIds = [...new Set(itemBarcodes.map((b) => b.SizeId))];
    const result = sizes.filter((size) => sizeIds.includes(size.id));

    log.debug('Available sizes result', { sizeIds, count: result.length });
    return result;
  };

  const getAvailableLots = (itemId, sizeId) => {
    log.debug('Computing available lots', {
      itemId,
      sizeId,
      selectedSupplier,
      selectedCustomer,
    });

    if (
      !itemId ||
      !sizeId ||
      !selectedSupplier ||
      !selectedCustomer ||
      !barcodes ||
      !lots ||
      !suppliers ||
      !customers
    ) {
      log.debug('Missing data for available lots');
      return [];
    }

    const supplier = suppliers.find((s) => s.id === selectedSupplier);
    const customer = customers.find((c) => c.id === selectedCustomer);

    if (!supplier || !customer) {
      log.warn('Supplier or customer missing for lots lookup');
      return [];
    }

    const matchingBarcodes = barcodes.filter(
      (barcode) =>
        barcode.SupplierName === supplier.SupplierName &&
        barcode.CustomerName === customer.CustomerName &&
        barcode.ItemId === itemId &&
        barcode.SizeId === sizeId &&
        barcode.Status === 'Available'
    );

    const lotIds = [...new Set(matchingBarcodes.map((b) => b.LotId))];
    const result = lots.filter((lot) => lotIds.includes(lot.id));

    log.debug('Available lots result', { lotIds, count: result.length });
    return result;
  };

  const handleLineItemChange = (index, field, value) => {
    log.debug('Line item change', { index, field, value });
    try {
      const updatedItems = [...lineItems];
      updatedItems[index] = { ...updatedItems[index], [field]: value };

      if (field === 'ItemId') {
        updatedItems[index].SizeId = '';
        updatedItems[index].LotId = '';
      }
      if (field === 'SizeId') {
        updatedItems[index].LotId = '';
      }

      setLineItems(updatedItems);
    } catch (e) {
      log.error('Error in handleLineItemChange', { error: e, index, field, value });
    }
  };

  const addLineItem = () => {
    log.info('Adding new line item');
    setLineItems([
      ...lineItems,
      { ItemId: '', SizeId: '', LotId: '', Quantity: 1 },
    ]);
  };

  const removeLineItem = (index) => {
    log.info('Removing line item', { index });
    if (lineItems.length > 1) {
      setLineItems(lineItems.filter((_, i) => i !== index));
    } else {
      log.warn('Attempted to remove last line item; ignored');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    log.info('Submit invoked', {
      selectedSupplier,
      selectedCustomer,
      releaseNumber,
      pickupDate,
      lineItems,
    });

    setError('');
    setSuccess('');
    setLoading(true);

    try {
      if (!selectedSupplier || !selectedCustomer || !releaseNumber.trim()) {
        throw new Error('Please fill in all required fields');
      }

      if (
        lineItems.some(
          (item) => !item.ItemId || !item.SizeId || !item.Quantity
        )
      ) {
        throw new Error('Please complete all line items');
      }

      const totalItems = lineItems.reduce(
        (sum, item) => sum + parseInt(item.Quantity, 10),
        0
      );
      const totalWeight = totalItems * 2200;

      const releaseData = {
        ReleaseNumber: releaseNumber.trim(),
        SupplierId: selectedSupplier,
        CustomerId: selectedCustomer,
        PickupDate: pickupDate || null,
        LineItems: lineItems,
        TotalItems: totalItems,
        TotalWeight: totalWeight,
        Status: 'Entered',
        CreatedAt: new Date(),
        CreatedBy: 'Office',
      };

      log.debug('Prepared releaseData', { releaseData });
      await addDoc(collection(db, 'releases'), releaseData);
      log.info('Release document created in Firestore');

      // Post-creation: pick ticket + notifications
      try {
        const supplier = suppliers?.find((s) => s.id === selectedSupplier);
        const customer = customers?.find((c) => c.id === selectedCustomer);

        // Generate pick ticket PDF
        const pickTicketDoc = await PickTicketService.generatePickTicket(
          releaseData,
          supplier,
          customer,
          lineItems.map((item) => ({
            ...item,
            itemName:
              items?.find((i) => i.id === item.ItemId)?.ItemName || 'Unknown',
            itemCode:
              items?.find((i) => i.id === item.ItemId)?.ItemCode || 'Unknown',
            sizeName:
              sizes?.find((s) => s.id === item.SizeId)?.SizeName || 'Unknown',
            lotNumber:
              lots?.find((l) => l.id === item.LotId)?.LotNumber || 'TBD',
          }))
        );

        const pickTicketBlob = PickTicketService.getPDFBlob(pickTicketDoc);

        log.debug('Pick ticket generated successfully');

        const warehouseStaff =
          (staff
            ?.filter(
              (s) =>
                s.receivesNewRelease &&
                s.phone &&
                s.status?.toLowerCase() !== 'inactive'
            )
            .map((s) => ({
              ...s,
              phone: s.phone,
            })) || []);

        log.debug('Filtered warehouse staff for notification', {
          count: warehouseStaff.length,
          warehouseStaff,
        });

        if (warehouseStaff.length > 0) {
          await SMSService.sendNewReleaseNotification(
            releaseData,
            supplier,
            customer,
            warehouseStaff,
            pickTicketBlob  // Restore PDF attachment
          );

          log.info('SMS notifications sent', {
            recipients: warehouseStaff.map((w) => w.phone),
          });

          setSuccess(
            `Release created successfully! Pick ticket sent to ${warehouseStaff.length} warehouse staff member${warehouseStaff.length !== 1 ? 's' : ''
            }.`
          );
        } else {
          log.warn('No warehouse staff configured or eligible for notification');
          setSuccess(
            'Release created successfully! No warehouse staff configured for notifications.'
          );
        }
      } catch (notifErr) {
        log.error('Error during pick ticket / notification phase', {
          error: notifErr,
        });
        setSuccess(
          'Release created successfully! (Pick ticket/notification failed)'
        );
      }

      // Reset form
      log.info('Resetting form state after success');
      setSelectedSupplier('');
      setSelectedCustomer('');
      setReleaseNumber('');
      setPickupDate('');
      setLineItems([{ ItemId: '', SizeId: '', LotId: '', Quantity: 1 }]);
    } catch (err) {
      log.error('Error in handleSubmit', { error: err });
      setError(err.message || 'Unexpected error');
    } finally {
      setLoading(false);
      log.debug('Submit finished, loading cleared');
    }
  };

  // Test availability function
  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-white rounded-lg shadow-md p-6">
        <h1 className="text-2xl font-bold text-gray-900 mb-6">
          Enter a Release

        <button
          type="button"
          onClick={testAvailability}
          className="mb-4 bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded"
        >
          ðŸ§ª Test Availability
        </button>
        </h1>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Supplier and Customer */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Supplier *
              </label>
              <select
                value={selectedSupplier}
                onChange={(e) => {
                  setSelectedSupplier(e.target.value);
                  log.debug('Supplier selected', { value: e.target.value });
                }}
                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                required
              >
                <option value="">Select Supplier</option>
                {suppliers?.map((supplier) => (
                  <option key={supplier.id} value={supplier.id}>
                    {supplier.SupplierName}
                  </option>
                ))}
              </select>
              {!suppliers && (
                <p className="text-xs text-yellow-600 mt-1">
                  Suppliers data not loaded yet.
                </p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Customer *
              </label>
              <select
                value={selectedCustomer}
                onChange={(e) => {
                  setSelectedCustomer(e.target.value);
                  log.debug('Customer selected', { value: e.target.value });
                }}
                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                required
              >
                <option value="">Select Customer</option>
                {customers?.map((customer) => (
                  <option key={customer.id} value={customer.id}>
                    {customer.CustomerName}
                  </option>
                ))}
              </select>
              {!customers && (
                <p className="text-xs text-yellow-600 mt-1">
                  Customers data not loaded yet.
                </p>
              )}
            </div>
          </div>

          {/* Release Number and Pickup Date */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Release Number *
              </label>
              <input
                type="text"
                value={releaseNumber}
                onChange={(e) => {
                  setReleaseNumber(e.target.value);
                  log.debug('Release number changed', {
                    value: e.target.value,
                  });
                }}
                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                placeholder="Enter release number"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Pickup Date (Optional)
              </label>
              <input
                type="date"
                value={pickupDate}
                onChange={(e) => {
                  setPickupDate(e.target.value);
                  log.debug('Pickup date changed', {
                    value: e.target.value,
                  });
                }}
                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
              />
            </div>
          </div>

          {/* Line Items */}
          <div>
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium text-gray-900">Line Items</h3>
              <button
                type="button"
                onClick={addLineItem}
                className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500"
              >
                + Add Line Item
              </button>
            </div>

            {lineItems.map((lineItem, index) => (
              <div
                key={index}
                className="border border-gray-200 rounded-lg p-4 mb-4"
              >
                <div className="flex justify-between items-center mb-4">
                  <h4 className="font-medium text-gray-800">
                    Line Item {index + 1}
                  </h4>
                  {lineItems.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeLineItem(index)}
                      className="text-red-600 hover:text-red-800"
                    >
                      Remove
                    </button>
                  )}
                </div>

                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  {/* Item */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Item *
                    </label>
                    <select
                      value={lineItem.ItemId}
                      onChange={(e) =>
                        handleLineItemChange(index, 'ItemId', e.target.value)
                      }
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                      required
                    >
                      <option value="">Select Item</option>
                      {getAvailableItems.map((item) => (
                        <option key={item.id} value={item.id}>
                          {item.ItemCode} - {item.ItemName}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Size */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Size *
                    </label>
                    <select
                      value={lineItem.SizeId}
                      onChange={(e) =>
                        handleLineItemChange(index, 'SizeId', e.target.value)
                      }
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                      required
                      disabled={!lineItem.ItemId}
                    >
                      <option value="">Select Size</option>
                      {getAvailableSizes(lineItem.ItemId).map((size) => (
                        <option key={size.id} value={size.id}>
                          {size.SizeName}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Lot */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Lot (Optional)
                    </label>
                    <select
                      value={lineItem.LotId}
                      onChange={(e) =>
                        handleLineItemChange(index, 'LotId', e.target.value)
                      }
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                      disabled={!lineItem.ItemId || !lineItem.SizeId}
                    >
                      <option value="">Select Lot</option>
                      {getAvailableLots(lineItem.ItemId, lineItem.SizeId).map(
                        (lot) => (
                          <option key={lot.id} value={lot.id}>
                            {lot.LotNumber}
                          </option>
                        )
                      )}
                    </select>
                  </div>

                  {/* Quantity */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Quantity *
                    </label>
                    <input
                      type="number"
                      min="1"
                      value={lineItem.Quantity}
                      onChange={(e) =>
                        handleLineItemChange(
                          index,
                          'Quantity',
                          parseInt(e.target.value, 10) || 1
                        )
                      }
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                      required
                    />
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Error/Success Messages */}
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded">
              {success}
            </div>
          )}

          {/* Submit Button */}
          <div className="flex justify-end">
            <button
              type="submit"
              disabled={loading}
              className="bg-green-600 text-white px-6 py-3 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'Creating Release...' : 'Create Release'}
            </button>
          </div>

          {/* Debug Info */}
          {selectedSupplier && selectedCustomer && (
            <div className="mt-6 p-4 bg-gray-50 rounded-lg">
              <h4 className="font-medium text-gray-700 mb-2">Debug Info:</h4>
              <div className="text-sm text-gray-600">
                <p>
                  Supplier:{' '}
                  {
                    suppliers?.find((s) => s.id === selectedSupplier)
                      ?.SupplierName
                  }
                </p>
                <p>
                  Customer:{' '}
                  {
                    customers?.find((c) => c.id === selectedCustomer)
                      ?.CustomerName
                  }
                </p>
                <p>
                  Available barcodes:{' '}
                  {barcodes
                    ?.filter(
                      (b) =>
                        b.SupplierName ===
                        suppliers?.find((s) => s.id === selectedSupplier)
                          ?.SupplierName &&
                        b.CustomerName ===
                        customers?.find((c) => c.id === selectedCustomer)
                          ?.CustomerName
                    )
                    .length || 0}
                </p>
                <p>Available items: {getAvailableItems.length}</p>
              </div>
            </div>
          )}
        </form>
      </div>
    </div>
  );
}